---
- name: install required packages
  yum: name={{item}}
  with_items:
    - qemu-kvm
    - libvirt
    - libvirt-python
    - libselinux-python
    - python-lxml
    - daemonize

- name: disable selinux
  selinux: state=disabled

- name: destroy and undefine pre-installed guest, or following defining does not work
  virt: name="{{vm_name}}" command={{item}}
  with_items:
    - destroy
    - undefine
  ignore_errors: yes

- name: ensure that libvirtd has been started correctly
  service: name=libvirtd state=started enabled=yes

- name: create directory for iso and vms
  file: path=/mnt/vm/{{item}} state=directory
  with_items:
    - iso
    - vms

- name: download netinst iso for jessie
  get_url:
    url: https://mirrors.tuna.tsinghua.edu.cn/debian-cd/8.6.0/amd64/iso-cd/debian-8.6.0-amd64-netinst.iso
    dest: /mnt/vm/iso/
    checksum: sha256:9479c5c2df72ae3878116c43fb42eefae53d1fe363ce514a6afc8289064b9f5f
  notify:
    - refresh pool for iso

- name: download initrd and kernel for installer
  get_url:
    url: https://mirrors.tuna.tsinghua.edu.cn/debian/dists/jessie/main/installer-amd64/current/images/cdrom/{{item}}
    dest: /mnt/vm/iso/
  with_items:
    - vmlinuz
    - initrd.gz
  notify:
    - refresh pool for iso

- name: create volume for guest
  qemu_img: dest=/mnt/vm/vms/{{vm_name}}.qcow2 size=102400
  notify:
    - refresh pool for vms

- name: define pools for iso and vms
  virt_pool: name="{{item}}" command=define xml='{{ lookup("template", "pool-dir.xml.j2") }}'
  with_items:
    - iso
    - vms

- name: start pools
  virt_pool: name="{{item}}" state=active
  with_items:
    - iso
    - vms

- name: enable pools
  virt_pool: name="{{item}}" autostart=yes
  with_items:
    - iso
    - vms

- name: define nat network for installation
  virt_net: name=nat command=define xml='{{ lookup("template", "net-nat.xml.j2") }}'

- name: start nat network for installation
  virt_net: name=nat state=active

- name: create directory for preseeds
  file: path=/tmp/preseeds state=directory mode="u=rwx,g=,o="

- name: upload preseed
  template: src=preseed.j2 dest=/tmp/preseeds/preseed-{{vm_name}}.txt mode="u=rw,g=,o="

- name: define the guest
  virt: name="{{vm_name}}" command=define xml='{{ lookup("template", "domain-kvm.xml.j2") }}'

- name: create directory for caddy
  file: path=/opt/caddy state=directory mode="u=rwx,g=,o="

- name: download and unarchive caddy
  unarchive:
    src: https://caddyserver.com/download/build?os=linux&arch=amd64&features=
    dest: /opt/caddy
    copy: false
    mode: 'g=,o='

- name: upload Caddyfile
  template: src=Caddyfile.j2 dest=/tmp/Caddyfile mode="u=rwx,g=,o="

- name: start caddy
  command: daemonize -p /tmp/caddy.pid -- /opt/caddy/caddy -conf=/tmp/Caddyfile

- name: remove the old log
  file: path=/tmp/{{vm_name}}-serial0.log state=absent

- name: start the installation
  virt: name="{{vm_name}}" state=running

- name: wait for installation finished
  wait_for: path=/tmp/{{vm_name}}-serial0.log search_regex="System halted" timeout=1200

- name: delete preseed
  file: path=/tmp/preseeds/preseed-{{vm_name}}.txt state=absent

- name: stop caddy
  command: pkill -F /tmp/caddy.pid

- name: undefine and destroy the guest
  virt: name="{{vm_name}}" command={{item}}
  with_items:
    - destroy
    - undefine

- set_fact: installed=yes

- name: redefine the guest
  virt: name="{{vm_name}}" command=define xml='{{ lookup("template", "domain-kvm.xml.j2") }}'

- name: start the guest
  virt: name="{{vm_name}}" state=running
